<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @copyright   Copyright (c) 2015 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Controller\Adminhtml\Vatnumber;

use Geissweb\Euvat\Helper\Configuration;
use Geissweb\Euvat\Helper\Functions;
use Geissweb\Euvat\Logger\Logger;
use Geissweb\Euvat\Model\Validation\Syntax;
use Geissweb\Euvat\Model\Validation\Vies;
use Geissweb\Euvat\Model\ValidationFactory;
use Geissweb\Euvat\Model\ValidationRepository;
use Geissweb\Euvat\Helper\VatNumber\Formatter;
use Magento\Backend\App\Action\Context;
use Magento\Framework\Controller\Result\Json as JsonResult;
use Magento\Framework\Controller\Result\Raw as RawResult;
use Magento\Framework\Controller\Result\Redirect as RedirectResult;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\DataObjectFactory;

/**
 * Class Validation
 * Executes validation for the admin area
 */
class Validation extends \Magento\Backend\App\Action
{
    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var Vies
     */
    public $viesService;

    /**
     * @var Context
     */
    public $context;

    /**
     * @var Logger
     */
    public $logger;

    /**
     * @var Functions
     */
    public $functionsHelper;

    /**
     * @var DataObjectFactory
     */
    public $dataObjectFactory;

    /**
     * @var \Magento\Framework\Intl\DateTimeFactory
     */
    public $dateTimeFactory;

    /**
     * @var ValidationRepository
     */
    private $validationRepository;

    /**
     * @var ValidationFactory
     */
    private $validationFactory;
    /**
     * @var Formatter
     */
    private $vatNumberFormatter;
    /**
     * @var Syntax
     */
    private $syntaxValidator;

    /**
     * Constructor
     *
     * @param Context              $context
     * @param DataObjectFactory    $dataObjectFactory
     * @param Configuration        $configHelper
     * @param Functions            $functionsHelper
     * @param Formatter            $vatNumberFormatter
     * @param Vies                 $viesService
     * @param Syntax               $syntaxValidator
     * @param ValidationRepository $validationRepository
     * @param ValidationFactory    $validationFactory
     * @param Logger               $logger
     *
     * @internal param \Magento\Framework\Json\Helper\Data $jsonHelper
     */
    public function __construct(
        Context $context,
        DataObjectFactory $dataObjectFactory,
        Configuration $configHelper,
        Functions $functionsHelper,
        Formatter $vatNumberFormatter,
        Vies $viesService,
        Syntax $syntaxValidator,
        ValidationRepository $validationRepository,
        ValidationFactory $validationFactory,
        Logger $logger
    ) {
        parent::__construct($context);
        $this->context = $context;
        $this->dataObjectFactory = $dataObjectFactory;
        $this->configHelper = $configHelper;
        $this->functionsHelper = $functionsHelper;
        $this->viesService = $viesService;
        $this->validationRepository = $validationRepository;
        $this->validationFactory = $validationFactory;
        $this->logger = $logger;
        $this->vatNumberFormatter = $vatNumberFormatter;
        $this->syntaxValidator = $syntaxValidator;
    }

    /**
     * Execute VAT number validation
     * @return JsonResult|RawResult|RedirectResult
     */
    public function execute()
    {
        /** @var RawResult $resultRaw */
        $resultRaw = $this->resultFactory->create(ResultFactory::TYPE_RAW);
        if ($this->getRequest()->getMethod() !== 'POST'
            || !$this->getRequest()->isXmlHttpRequest()
            || !$this->_formKeyValidator->validate($this->getRequest())
        ) {
            return $resultRaw->setHttpResponseCode(400);
        }

        $result = $this->viesService->getResult(); //empty result for initialization
        $vatNumber = $this->getRequest()->getPost('vat_number');
        $vatNumberFromSales = $this->getRequest()->getPost('vat');

        $address = $this->dataObjectFactory->create();
        $address->setCountryId($this->vatNumberFormatter->extractCountryIdFromVatId($vatNumber));

        $customerGroup = (int)$this->configHelper->getTargetGroupDefault();
        $needToValidate = $this->functionsHelper->getNeedToValidate($vatNumber);
        $existingValidation = $this->functionsHelper->getValidationData($vatNumber);

        if (empty($vatNumber) && !empty($vatNumberFromSales)) {
            $vatNumber = $vatNumberFromSales;
            $countryFromSales = $this->getRequest()->getPost('country');
            $address->setCountryId($countryFromSales);

            $customerGroup = $this->functionsHelper->getCustomerGroup(
                $address,
                (!$existingValidation) ? $this->validationFactory->create() : $existingValidation
            );
        }
        $vatCc = substr($vatNumber, 0, 2);
        $vatNumberWithoutCc = str_replace($vatCc, '', $vatNumber);

        try {
            //If we can reuse the existing validation
            if (!$needToValidate
                && $existingValidation instanceof \Geissweb\Euvat\Api\Data\ValidationInterface
            ) {
                $isValid = (bool)$existingValidation->getVatIsValid();
                $isRequestSuccess = (bool)$existingValidation->getVatRequestSuccess();
                $existingValidation->setVatIsValid($isValid);
                $existingValidation->setVatRequestSuccess($isRequestSuccess);
                if ($isValid && $isRequestSuccess) {
                    $existingValidation->setRequestMessage(__('The VAT number is valid.'));
                } elseif (!$isValid && $isRequestSuccess) {
                    $existingValidation->setRequestMessage(__('The VAT number is invalid.'));
                }

                return $this->resultFactory->create(ResultFactory::TYPE_JSON)->setData([
                    'group' => $customerGroup,
                    'valid' => $existingValidation->getVatIsValid(),
                    'vat_is_valid' => $existingValidation->getVatIsValid(),
                    'success' => $existingValidation->getVatRequestSuccess(),
                    'trader_name' => $existingValidation->getVatTraderName(),
                    'trader_address' => $existingValidation->getVatTraderAddress(),
                    'vat_request_date' => $existingValidation->getVatRequestDate(),
                    'vat_request_id' => $existingValidation->getVatRequestId(),
                    'request_message' => $existingValidation->getRequestMessage()
                ]);
            } else {
                // Live validate
                $this->viesService->setParam('countryCode', $vatCc);
                $this->viesService->setParam('vatNumber', $vatNumberWithoutCc);
                $this->viesService->validate();
                /** @var \Geissweb\Euvat\Api\Data\ValidationResultInterface $response */
                $result = $this->viesService->getResult();
                $this->_eventManager->dispatch('vat_validation_after', [
                    'validation_result' => $result
                ]);
            }
        } catch (\SoapFault $e) {
            $this->logger->error($e);

            if ($this->configHelper->isOfflineValidationEnabled()
               && $this->configHelper->isOfflineValidationCountry($vatCc)
               && $this->syntaxValidator->isValid($vatNumberWithoutCc, $vatCc)
            ) {
                $this->viesService->setParam('countryCode', $vatCc);
                $this->viesService->setParam('vatNumber', $vatNumberWithoutCc);
                $result = $this->viesService->getOfflineResult(); //offline result
                $toSaveValidation = clone $result;
                $toSaveValidation->setRequestMessage($e->getMessage());
                $this->_eventManager->dispatch('vat_validation_after', [
                    'validation_result' => $toSaveValidation
                ]);
            } else {
                $result = $this->viesService->getResult(); //empty/new result
                if ($result->getVatRequestId() === 'INIT') {
                    $result->setWarning(true);
                    $result->setRequestMessage(
                        __('VAT Number validation interface unavailable (' . $e->faultstring . ').')
                    );
                }
                switch ($e->faultstring) {
                    case 'INVALID_REQUESTER_INFO':
                    case 'Empty Requester VAT number':
                        $result->setRequestMessage(
                            __('Invalid requester information. Please check your merchant VAT number.')
                        );
                        $result->setError(true);
                        $result->setWarning(false);
                        break;
                    case 'MS_UNAVAILABLE':
                        $result->setRequestMessage(
                            __('Currently it is not possible to validate VAT numbers from this country.')
                        );
                        $result->setWarning(true);
                        break;
                    case 'TIMEOUT':
                        $result->setRequestMessage(
                            __('The connection to the validation interface timed out. Please try again.')
                        );
                        $result->setWarning(true);
                        break;
                    case 'INVALID_INPUT':
                    case 'Invalid_input':
                        $result->setRequestMessage(__('The VAT number is invalid.'));
                        $result->setError(true);
                        $result->setWarning(false);
                        break;
                    case 'GLOBAL_MAX_CONCURRENT_REQ':
                    case 'GLOBAL_MAX_CONCURRENT_REQ_TIME':
                    case 'MS_MAX_CONCURRENT_REQ':
                    case 'MS_MAX_CONCURRENT_REQ_TIME':
                    case 'SERVICE_UNAVAILABLE':
                        $result->setRequestMessage(__('The VAT number validation service is busy.'));
                        $result->setWarning(true);
                        break;
                    default:
                        $result->setRequestMessage($e->faultstring);
                        $result->setError(true);
                        $result->setWarning(false);
                        break;
                }
            }
        }

        $response = [
            'group' => $this->functionsHelper->getCustomerGroup($address, $result),
            'valid' => $result->getVatIsValid(),
            'vat_is_valid' => $result->getVatIsValid(),
            'success' => $result->getVatRequestSuccess(),
            'trader_name' => $result->getVatTraderName(),
            'trader_address' => $result->getVatTraderAddress(),
            'vat_request_date' => $result->getVatRequestDate(),
            'vat_request_id' => $result->getVatRequestId(),
            'request_message' => $result->getRequestMessage()
        ];

        return $this->resultFactory->create(ResultFactory::TYPE_JSON)->setData($response);
    }
}
